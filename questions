
# chatgpt 가 뭐지??
# ai 모델의 본질이 뭐지?
# 어떻게 하면 내가 ai를 잘 활용할 수 있지?


# ai를 잘 활용하려면????

1. 질문을 잘 하는 것
2. 본질을 이해하는 지식


# 내가 무엇을 하고 싶지?

* 데이터를 얻는 능력
* 데이터를 다루는 능력
* 서비스를 만드는 기술


# 데이터를 얻으려면 어떻게 해야하지?

* DB에서 얻는 방법:SELECT, FROM, WHERE, ORDER BY, GROUP BY, JOIN (1:M)
* 웹(HTML)에서 얻는 방법: 전체 HTML을 가져오고, 그것을 파싱해서 사용
* API를 사용하는 방법: 

# API의 본질이 뭐지?

* URL을 통한 서비스 제공 주소
* GET/POST 방식


# GET/POST 방식

GET 방식과 POST 방식은 HTTP(Hypertext Transfer Protocol)를 통해 
클라이언트(웹 브라우저)와 서버 간에 데이터를 전송하는 방법입니다.

GET 방식은 주로 서버로부터 정보를 조회하기 위해 사용됩니다. 
이 방식은 URL에 파라미터를 포함시켜 요청을 전송합니다. 브라우저에서 웹 페이지를 열 때, 
웹 서버에게 URL과 함께 GET 요청을 보내면, 서버는 해당 URL에 해당하는 데이터를 검색하여 응답을 
클라이언트에게 보내줍니다. 이러한 GET 방식의 특징은 캐싱이 가능하고 브라우저에서 쉽게 캐시된 데이터를 
재사용할 수 있다는 것입니다. 또한, GET 요청에 대한 응답은 URL 상에 파라미터가 노출되어 보안에 취약할 수 있습니다.

반면, POST 방식은 클라이언트에서 서버로 데이터를 전송하는데 사용됩니다. 
이 방식은 URL에 데이터를 포함시키지 않고, HTTP 요청 메시지의 본문(body)에 데이터를 
담아 요청을 전송합니다. 이러한 POST 방식의 특징은 GET 방식과 달리 데이터를 숨길 수 있다는 것입니다. 
또한, 데이터의 크기가 GET 방식보다 크고, 데이터의 형태가 다양하다는 것도 POST 방식의 특징입니다. 

그러나, POST 방식은 GET 방식에 비해 느리고 복잡하며, 중요한 데이터의 경우에는 
보안을 강화하기 위해 HTTPS와 같은 보안 프로토콜을 적용해야 할 수도 있습니다.


`requests` 모듈은 간단하고 직관적인 API를 제공하여 HTTP 요청을 보내는 작업을 쉽게 할 수 있습니다.
먼저 GET 방식으로 HTTP 요청을 보내는 예제 코드를 보여드리겠습니다.

```python
import requests

# GET 방식으로 요청을 보내는 예제
response = requests.get('https://jsonplaceholder.typicode.com/todos/1')

# 요청 결과 확인
print(response.status_code)  # 200
print(response.json())  # {'userId': 1, 'id': 1, 'title': 'delectus aut autem', 'completed': False}
```

위 코드에서는 `requests.get()` 함수를 사용하여 'https://jsonplaceholder.typicode.com/todos/1' URL에 
GET 요청을 보내고, 응답 결과를 `response` 변수에 저장합니다. `response.status_code`는 요청에 대한 
응답 상태 코드를 반환하며, `response.json()`은 JSON 형식으로 변환된 응답 결과를 반환합니다.

이번에는 POST 방식으로 HTTP 요청을 보내는 예제 코드를 보여드리겠습니다.

```python
import requests

# POST 방식으로 요청을 보내는 예제
data = {'username': 'johndoe', 'password': 'mypassword'}
response = requests.post('https://httpbin.org/post', data=data)

# 요청 결과 확인
print(response.status_code)  # 200
print(response.json()['form'])  # {'username': 'johndoe', 'password': 'mypassword'}
```

위 코드에서는 `requests.post()` 함수를 사용하여 'https://httpbin.org/post' URL에 
POST 요청을 보내고, 데이터는 `data` 변수에 저장합니다. `response.json()['form']`은 
전송된 데이터가 JSON 형식으로 변환된 응답 결과 중 `form` 필드에 저장되어 있는 것을 반환합니다.


# 데이터를 가지고 서비스를 만드려면 어떤 지식이 있어야하지?

* 데이터를 얻는 지식
* 데이터를 다루는 지식 (데이터에서 가치를 뽑아내는 지식)
* 웹/앱 서비스를 만드는 지식


# 파이썬 프로그래밍이라는 관점에서 주요기술은?

* 크롤링/API를 통해 데이터를 얻는 기술
* 데이터 분석/ ML-DL 을 통해 가치를 얻는 기술
* 웹 서비스 만드는 기술


# 웹서비스를 만드려면 어떤 지식이 필요하지??

# 웹서비스의 본질이 뭐지?

* 클라이언트/서버 시스템 
* 서버는 데이터를 가지고 있고, 클라이언트(브라우저)는 요청함
* 전체를 조망하는 파이썬 파일이 필요하고.. (어플리케이션 팩토리)
* 데이터를 다루는 파이썬 파일이 필요하고.. (models.py)
* 각 URL별로 기능을 정하는 파이썬 파일이 필요하고 (views.py)  >> blueprint 를 사용


# url_for 함수의 기능이 뭐지?

Flask에서는 `url_for()` 함수를 사용하여 URL을 동적으로 생성할 수 있습니다. 
이 함수는 URL을 생성할 때 라우팅 URL에 대한 함수 이름 또는 URL에 매핑된 
뷰 함수의 이름과 매개 변수를 사용합니다.

`url_for()` 함수는 Flask 애플리케이션 내부에서 매핑된 URL을 찾아 
해당 URL에 대한 URL 문자열을 반환합니다. 이 함수를 사용하면 URL을 하드코딩하지 않고, 
URL을 더 유지보수 가능하게 만들 수 있습니다.

예를 들어, 다음과 같은 Flask 애플리케이션을 가정해봅시다.

```python

from flask import Flask, url_for

app = Flask(__name__)

@app.route('/')
def index():
    return 'Index Page'

@app.route('/login')
def login():
    return 'Login Page'

@app.route('/user/<username>')
def profile(username):
    return f'{username}\'s profile'

if __name__ == '__main__':
    app.run()
```

위 코드에서는 `/`, `/login`, `/user/<username>` 세 가지 URL에 대해 라우팅을 
수행하는 세 개의 뷰 함수가 정의되어 있습니다.

이제 `url_for()` 함수를 사용하여 이러한 URL에 대한 URL 문자열을 동적으로 생성해봅시다.

```python

with app.test_request_context():
    print(url_for('index'))  # 출력: /
    print(url_for('login'))  # 출력: /login
    print(url_for('profile', username='johndoe'))  # 출력: /user/johndoe
    
```

`url_for()` 함수는 `with app.test_request_context()`로 감싸야 합니다. 
이는 Flask가 request context를 구성하는 데 필요한 환경을 구성하기 때문입니다. 
이렇게 구성한 후에는 `url_for()` 함수를 호출하여 URL 문자열을 생성할 수 있습니다.

첫 번째 예제에서 `url_for('index')`는 '/' URL 문자열을 반환합니다. 
두 번째 예제에서 `url_for('login')`는 '/login' URL 문자열을 반환합니다. 세 번째 예제에서 
`url_for('profile', username='johndoe')`는 '/user/johndoe' URL 문자열을 반환합니다. 

즉, `url_for()` 함수를 사용하여 동적으로 URL 문자열을 생성하면 
URL을 하드코딩하지 않고 URL을 유지보수 가능하게 만들 수 있습니다.



# 플라스크를 이용해서 최소한의 기능을 가지는 웹서비스를 만드려면 어떻게 하지??



# 플라스크에서  POST 요청을 처리하는 방법은?

Flask에서 POST 요청을 처리하는 방법은 간단합니다. 
먼저, 클라이언트는 POST 방식으로 데이터를 서버에 전송해야 합니다. 
이를 위해서는 HTML form 태그에서 `method="post"`를 지정하거나, Ajax 등의 기술을 
사용하여 POST 요청을 보내면 됩니다.

그리고 서버 측에서는 `@app.route` 데코레이터에서 `methods` 매개변수를 
사용하여 POST 방식을 허용하는 라우트 함수를 정의하면 됩니다. 예를 들어, 다음과 같은 코드를 사용할 수 있습니다.

```python

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/json_test', methods=['POST'])
def hello_json_post():
    data = request.json
    name = data['name']
    family = data['family']
    message = f"Hello, {name} {family}!"
    return jsonify({'message': message})

if __name__ == '__main__':
    app.run(debug=True)
```

위의 코드에서는 `@app.route('/json_test', methods=['POST'])`를 사용하여 '/json_test' 
URL에 대한 POST 요청을 처리하는 함수를 정의합니다. 함수 내에서는 `request.json`을 사용하여 
클라이언트가 전송한 JSON 데이터를 가져옵니다. 그리고 데이터에서 'name'과 'family' 값을 추출하여 
이를 사용하여 메시지를 생성하고, 이를 다시 JSON 형식으로 반환합니다.

이제 클라이언트에서는 POST 방식으로 '/json_test' URL에 데이터를 전송하면 서버에서 
해당 데이터를 처리하고 결과를 반환할 수 있습니다.


POST 요청을 보내는 클라이언트는 다양한 방법으로 구현할 수 있습니다. 
여기서는 Python의 `requests` 모듈을 사용하여 POST 요청을 보내는 예시를 보여드리겠습니다.

```python

import requests

url = 'http://localhost:5000/json_test'
data = {'name': '홍길동', 'family': 'Hong'}

response = requests.post(url, json=data)

if response.status_code == 200:
    result = response.json()
    print(result['message'])
else:
    print('서버 오류')
```

위의 코드에서는 `requests.post` 메소드를 사용하여 '/json_test' URL에 데이터를 전송합니다. 
이 때, `json` 매개변수를 사용하여 데이터를 JSON 형식으로 인코딩하여 전송합니다.

그리고 서버에서 응답을 받으면, `response.status_code`를 사용하여 응답 코드를 확인합니다. 
응답 코드가 200이면 성공적으로 요청이 처리된 것이므로, `response.json()` 메소드를 사용하여 
서버에서 반환한 JSON 데이터를 디코딩하고, 메시지를 출력합니다. 그렇지 않으면 '서버 오류' 메시지를 출력합니다.

참고로, 클라이언트에서 POST 요청을 보낼 때 데이터를 인코딩할 때는 JSON 이외에도 
`application/x-www-form-urlencoded`, `multipart/form-data` 등의 형식을 사용할 수 있습니다. 
이에 따라 데이터 전송 방식과 서버에서 데이터를 처리하는 방식도 다를 수 있으므로, 
상황에 맞게 적절한 형식을 선택하여 사용해야 합니다.







